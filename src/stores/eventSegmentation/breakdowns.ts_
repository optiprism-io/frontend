import {defineStore} from 'pinia'
import * as types from "../../types";
import {EventRef, OperationId, PropertyRef, Value} from "../../types";
import {Prop} from "vue";


export enum BreakdownType {
    UserProperty,
    UserCustomProperty,
    EventCommonProperty,
    EventCommonCustomProperty,
    EventProperty,
    EventCustomProperty,
}

type UserProperty = {
    type: string
    id: number;
}

type UserCustomProperty = {
    type: string
    id: number;
}

type EventCommonProperty = {
    type: string
    id: number;
}

type EventCommonCustomProperty = {
    type: string
    id: number;
}

type EventProperty = {
    type: string;
    eventRef?: EventRef;
    id: number;
}

type EventCustomProperty = {
    type: string;
    eventRef?: EventRef;
    id: number;
}

export type Breakdown =
    UserProperty
    | UserCustomProperty
    | EventCommonProperty
    | EventCommonCustomProperty
    | EventProperty
    | EventCustomProperty


type Breakdowns = {
    breakdowns: Breakdown[]
}

export const filtersStore = defineStore('breakdowns', {
    state: (): Breakdowns => ({breakdowns: []}),
    actions: {
        addBreakdown(ref: Breakdown): void {
            this.filters.push(<Filter>{ref: ref, opId: OperationId.Eq, values: []});
        },
        removeFilter(idx: number): void {
            this.filters.splice(idx, 1);
        },
        changeFilterRef(filterIdx: number, ref: FilterRef): void {
            this.filters[filterIdx] = <Filter>{
                ref: ref,
                opId: types.OperationId.Eq,
                values: []
            };
        },
        changeFilterOperation(filterIdx: number, opId: types.OperationId): void {
            this.filters[filterIdx].opId = opId;
        },
        addFilterValue(filterIdx: number, value: Value): void {
            this.filters[filterIdx].values.push(value);
        },
        removeFilterValue(filterIdx: number, value: Value): void {
            this.filters[filterIdx].values = this.filters[filterIdx].values.filter((v) => {
                return v !== value;
            })
        },
    }
})