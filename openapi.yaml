openapi: 3.0.0
info:
  version: 1.0.0
  title: OptiPrism
  termsOfService: https://optiprism.io/terms/
  contact:
    email: api@optiprism.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - description: OptiPrism API server
    url: /
tags:
  - name: events
    description: Events
  - name: properties
    description: Properties
  - name: reports
    description: Reports
externalDocs:
  description: Find out more about OptiPrism api
  url: https://dev.optiprism.io/api
paths:
  /v1/auth/login:
    post:
      summary: Basic login
      operationId: basicLogin
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/auth/signup:
    post:
      summary: Basic signup
      operationId: basicSignup
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        201:
          description: tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/auth/refresh-token:
    post:
      summary: Refresh access token
      operationId: refreshToken
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        200:
          description: tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/profile:
    get:
      summary: Get profile
      operationId: getProfile
      security:
        - bearerAuth: [ ]
      tags:
        - profile
      responses:
        200:
          description: profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/profile/name:
    put:
      summary: Update name
      operationId: updateProfileName
      security:
        - bearerAuth: [ ]
      tags:
        - profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileNameRequest'
      responses:
        204:
          description: the name was changed successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/profile/email:
    put:
      summary: Update email
      operationId: updateProfileEmail
      security:
        - bearerAuth: [ ]
      tags:
        - profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileEmailRequest'
      responses:
        200:
          description: profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/profile/password:
    put:
      summary: Update password
      operationId: updateProfilePassword
      security:
        - bearerAuth: [ ]
      tags:
        - profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfilePasswordRequest'
      responses:
        200:
          description: profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/profile/set-password:
    put:
      summary: Set password from default to defined
      operationId: setProfilePassword
      security:
        - bearerAuth: [ ]
      tags:
        - profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetProfilePasswordRequest'
      responses:
        204:
          description: profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/profile/set-email:
    put:
      summary: Set email from default to defined
      operationId: setProfileEmail
      security:
        - bearerAuth: [ ]
      tags:
        - profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetProfileEmailRequest'
      responses:
        204:
          description: profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/organizations:
    get:
      summary: Organizations list
      operationId: organizationsList
      security:
        - bearerAuth: [ ]
      tags:
        - organizations
      responses:
        '200':
          $ref: '#/components/responses/ListOrganizationsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      summary: Create organization
      operationId: createOrganization
      security:
        - bearerAuth: [ ]
      tags:
        - projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
      responses:
        201:
          description: organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/organizations/{organizationId}:
    get:
      summary: Get organizations
      operationId: organization
      security:
        - bearerAuth: [ ]
      tags:
        - organizations
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
      responses:
        200:
          description: project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    put:
      summary: Update organization
      operationId: updateOrganization
      security:
        - bearerAuth: [ ]
      tags:
        - projects
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequest'
      responses:
        200:
          description: organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      summary: Delete organization
      operationId: deleteOrganization
      security:
        - bearerAuth: [ ]
      tags:
        - projects
      parameters:
        - $ref: '#/components/parameters/OrganizationID'
      responses:
        200:
          description: deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /v1/projects:
    get:
      summary: Projects list
      operationId: projectsList
      security:
        - bearerAuth: [ ]
      tags:
        - projects
      responses:
        '200':
          $ref: '#/components/responses/ListProjectsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      summary: Create project
      operationId: createProject
      security:
        - bearerAuth: [ ]
      tags:
        - projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        201:
          description: project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}:
    get:
      summary: Get project
      operationId: project
      security:
        - bearerAuth: [ ]
      tags:
        - projects
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      responses:
        200:
          description: project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    put:
      summary: Update project
      operationId: updateProject
      security:
        - bearerAuth: [ ]
      tags:
        - projects
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        200:
          description: project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      summary: Delete project
      operationId: deleteProject
      security:
        - bearerAuth: [ ]
      tags:
        - projects
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      responses:
        200:
          description: deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  ## ##
  /v1/projects/{projectId}/dashboards:
    get:
      summary: Dashboards list
      operationId: dashboardsList
      security:
        - bearerAuth: [ ]
      tags:
        - dashboards
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      responses:
        '200':
          $ref: '#/components/responses/ListDashboardsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      summary: Create dashboard
      operationId: createDashboard
      security:
        - bearerAuth: [ ]
      tags:
        - dashboards
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDashboardRequest'
      responses:
        201:
          description: dashboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/dashboards/{dashboardId}:
    get:
      summary: Get dashboard
      operationId: getDashboard
      security:
        - bearerAuth: [ ]
      tags:
        - dashboards
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - name: dashboardId
          in: path
          description: Dashboard ID
          required: true
          schema:
            type: number
      responses:
        200:
          description: dashboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    put:
      summary: Update dashboard
      operationId: updateDashboard
      security:
        - bearerAuth: [ ]
      tags:
        - dashboards
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - name: dashboardId
          in: path
          description: Dashboard ID
          required: true
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDashboardRequest'
      responses:
        200:
          description: dashboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      summary: Delete dashboard
      operationId: deleteDashboard
      security:
        - bearerAuth: [ ]
      tags:
        - dashboards
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - name: dashboardId
          in: path
          description: Dashboard ID
          required: true
          schema:
            type: number
      responses:
        200:
          description: deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/reports:
    get:
      summary: Reports list
      operationId: reportsList
      security:
        - bearerAuth: [ ]
      tags:
        - reports
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      responses:
        '200':
          description: report list
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Report'
                  - $ref: '#/components/schemas/ListResponseMetadata'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      summary: Create report
      operationId: createReport
      security:
        - bearerAuth: [ ]
      tags:
        - reports
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReportRequest'
      responses:
        201:
          description: report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/reports/{reportId}:
    get:
      summary: Get report
      operationId: getReport
      security:
        - bearerAuth: [ ]
      tags:
        - reports
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - name: reportId
          in: path
          description: Report ID
          required: true
          schema:
            type: number
      responses:
        200:
          description: report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    put:
      summary: Update report
      operationId: updateReport
      security:
        - bearerAuth: [ ]
      tags:
        - reports
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - name: reportId
          in: path
          description: Report ID
          required: true
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReportRequest'
      responses:
        200:
          description: event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      summary: Delete report
      operationId: deleteReport
      security:
        - bearerAuth: [ ]
      tags:
        - reports
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - name: reportId
          in: path
          description: Report ID
          required: true
          schema:
            type: number
      responses:
        204:
          description: deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/bookmarks:
    post:
      summary: Create bookmark
      operationId: createBookmark
      security:
        - bearerAuth: [ ]
      tags:
        - reports
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookmarkRequest'
      responses:
        201:
          description: bookmark
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/bookmarks/{bookmarkId}:
    get:
      summary: Get bookmark
      operationId: getBookmark
      security:
        - bearerAuth: [ ]
      tags:
        - bookmarks
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - name: bookmarkId
          in: path
          description: Bookmark ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: bookmark
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/groups:
    get:
      summary: Group list
      operationId: groupList
      security:
        - bearerAuth: [ ]
      tags:
        - groups
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      responses:
        '200':
          description: groups list
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Group'
                  - $ref: '#/components/schemas/ListResponseMetadata'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/schema/events:
    get:
      summary: Events list
      operationId: eventsList
      security:
        - bearerAuth: [ ]
      tags:
        - events
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      responses:
        '200':
          description: event list
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Event'
                  - $ref: '#/components/schemas/ListResponseMetadata'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/schema/events/{eventId}:
    get:
      summary: Get event
      operationId: getEvent
      security:
        - bearerAuth: [ ]
      tags:
        - events
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - name: eventId
          in: path
          description: Event ID
          required: true
          schema:
            type: number
      responses:
        200:
          description: event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    put:
      summary: Update event
      operationId: updateEvent
      security:
        - bearerAuth: [ ]
      tags:
        - events
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - name: eventId
          in: path
          description: Event ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventRequest'
      responses:
        200:
          description: event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/schema/custom-events:
    get:
      summary: Custom events list
      operationId: customEventsList
      security:
        - bearerAuth: [ ]
      tags:
        - custom events
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      responses:
        '200':
          description: custom event list
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/CustomEvent'
                  - $ref: '#/components/schemas/ListResponseMetadata'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      summary: Create custom event
      operationId: createCustomEvent
      security:
        - bearerAuth: [ ]
      tags:
        - custom events
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomEventRequest'
      responses:
        201:
          description: custom event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomEvent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/schema/custom-events/{eventId}:
    get:
      summary: Get custom event
      operationId: getCustomEvent
      security:
        - bearerAuth: [ ]
      tags:
        - custom events
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - name: eventId
          in: path
          description: Event ID
          required: true
          schema:
            type: number
      responses:
        200:
          description: custom event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomEvent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      summary: Delete custom event
      operationId: deleteCustomEvent
      security:
        - bearerAuth: [ ]
      tags:
        - custom events
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - name: eventId
          in: path
          description: Event ID
          required: true
          schema:
            type: number
      responses:
        204:
          description: deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    put:
      summary: Update custom event
      operationId: updateCustomEvent
      security:
        - bearerAuth: [ ]
      tags:
        - custom events
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - name: eventId
          in: path
          description: Custom Event ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomEventRequest'
      responses:
        201:
          description: custom event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomEvent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/schema/group-properties/{groupId}:
    get:
      summary: Group properties list
      operationId: groupPropertiesList
      security:
        - bearerAuth: [ ]
      tags:
        - group properties
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - name: groupId
          in: path
          description: Group
          required: true
          schema:
            type: string
      responses:
        '200':
          description: properties list
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ListPropertiesResponse'
                  - $ref: '#/components/schemas/ListResponseMetadata'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/schema/system-group-properties:
    get:
      summary: Get system group property
      operationId: getSystemGroupProperty
      security:
        - bearerAuth: [ ]
      tags:
        - system group properties
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      responses:
        201:
          description: system group property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/schema/event-properties:
    get:
      summary: Event properties list
      operationId: eventPropertiesList
      security:
        - bearerAuth: [ ]
      tags:
        - event properties
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      responses:
        '200':
          description: properties list
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ListPropertiesResponse'
                  - $ref: '#/components/schemas/ListResponseMetadata'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/schema/event-properties/{propertyId}:
    get:
      summary: Get event property
      operationId: getEventProperty
      security:
        - bearerAuth: [ ]
      tags:
        - event properties
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - name: propertyId
          in: path
          description: Property ID
          required: true
          schema:
            type: number
      responses:
        201:
          description: event property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    put:
      summary: Update event property
      operationId: updateEventProperty
      security:
        - bearerAuth: [ ]
      tags:
        - event properties
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - name: propertyId
          in: path
          description: Property ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePropertyRequest'
      responses:
        201:
          description: property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/schema/system-properties:
    get:
      summary: System properties list
      operationId: systemPropertiesList
      security:
        - bearerAuth: [ ]
      tags:
        - system properties
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      responses:
        '200':
          description: properties list
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ListPropertiesResponse'
                  - $ref: '#/components/schemas/ListResponseMetadata'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/schema/system-properties/{propertyId}:
    get:
      summary: Get system property
      operationId: getSystemProperty
      security:
        - bearerAuth: [ ]
      tags:
        - system properties
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - name: propertyId
          in: path
          description: Property ID
          required: true
          schema:
            type: number
      responses:
        201:
          description: system property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/schema/custom-properties:
    get:
      summary: Event custom properties list
      operationId: customPropertiesList
      security:
        - bearerAuth: [ ]
      tags:
        - properties
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      responses:
        '200':
          description: event custom properties list
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ListCustomPropertiesResponse'
                  - $ref: '#/components/schemas/ListResponseMetadata'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/event-records/{id}:
    get:
      summary: Get event record
      operationId: getEventRecord
      security:
        - bearerAuth: [ ]
      tags:
        - event records
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - name: id
          in: path
          description: Event Record ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventRecord'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/event-records/search:
    post:
      summary: Get event records
      operationId: eventRecordsList
      security:
        - bearerAuth: [ ]
      tags:
        - event records
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRecordsListRequest'
      responses:
        '200':
          description: event records list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataTableResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/group-records/{group}/{id}:
    get:
      summary: Get group record
      operationId: getGroupRecord
      security:
        - bearerAuth: [ ]
      tags:
        - group records
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - name: group
          in: path
          description: Group ID
          required: true
          schema:
            type: integer
            format: i64
        - name: id
          in: path
          description: Group Record ID
          required: true
          schema:
            type: integer
            format: i64
      responses:
        200:
          description: event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupRecord'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    put:
      summary: Update group record
      operationId: updateGroupRecord
      security:
        - bearerAuth: [ ]
      tags:
        - group records
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - name: id
          in: path
          description: Group Record ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRecordRequest'
      responses:
        200:
          description: event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupRecord'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/group-records/search:
    post:
      summary: List group records
      operationId: groupRecordsList
      security:
        - bearerAuth: [ ]
      tags:
        - group records
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRecordsListRequest'
      responses:
        '200':
          description: events list
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ListGroupRecordsResponse'
                  - $ref: '#/components/schemas/ListResponseMetadata'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/property-values:
    post:
      summary: List of property values
      operationId: PropertyValuesList
      security:
        - bearerAuth: [ ]
      tags:
        - property values
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      requestBody:
        required: true
        description: |
          property type and property id/name must be specified. Event is optional
          and  works as a filter for values
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListPropertyValuesRequest'
      responses:
        '200':
          description: list property values
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListPropertyValuesResponse'
                  - $ref: '#/components/schemas/ListResponseMetadata'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/queries/event-segmentation:
    post:
      summary: Event segmentation query
      operationId: eventSegmentationQuery
      security:
        - bearerAuth: [ ]
      tags:
        - query
      parameters:
        - $ref: '#/components/parameters/ProjectID'
        - in: query
          name: format
          schema:
            type: string
            enum:
              - json
              - jsonCompact
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSegmentation'
      responses:
        '200':
          description: event segmentation query response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataTableResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/projects/{projectId}/queries/funnel:
    post:
      summary: Funnel query
      operationId: funnelQuery
      security:
        - bearerAuth: [ ]
      tags:
        - query
      parameters:
        - $ref: '#/components/parameters/ProjectID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunnelQuery'
      responses:
        '200':
          description: funnel query response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunnelResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    ProjectID:
      name: projectId
      in: path
      required: true
      schema:
        type: number
    OrganizationID:
      name: organizationId
      in: path
      required: true
      schema:
        type: number
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Internal:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServiceUnavailable:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ListDashboardsResponse:
      description: dashboard list
      content:
        application/json:
          schema:
            type: object
            allOf:
              - properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dashboard'
              - $ref: '#/components/schemas/ListResponseMetadata'
    ListProjectsResponse:
      description: project list
      content:
        application/json:
          schema:
            type: object
            allOf:
              - properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
              - $ref: '#/components/schemas/ListResponseMetadata'
    ListOrganizationsResponse:
      description: organization list
      content:
        application/json:
          schema:
            type: object
            allOf:
              - properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Organization'
              - $ref: '#/components/schemas/ListResponseMetadata'
  schemas:
    LoginRequest:
      type: object
      required: [ 'email', 'password', 'passwordRepeat' ]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    SignupRequest:
      type: object
      required: [ 'email', 'password', 'passwordRepeat' ]
      properties:
        email:
          type: string
        password:
          type: string
          format: password
        passwordRepeat:
          type: string
          format: password
        firstName:
          type: string
        lastName:
          type: string
    RefreshTokenRequest:
      type: object
      required: [ 'refreshToken' ]
      properties:
        refreshToken:
          type: string
    ListPropertyValuesRequest:
      type: object
      required: [ 'propertyType' ]
      allOf:
        - $ref: '#/components/schemas/PropertyRef'
        - $ref: '#/components/schemas/EventRef'
        - type: object
          properties:
            filter:
              type: object
              title: 'PropertyValuesRequestFilter'
              required: [ 'operation', 'value' ]
              properties:
                operation:
                  $ref: '#/components/schemas/PropertyFilterOperation'
                value:
                  type: array
                  items:
                    $ref: '#/components/schemas/Value'
    ListPropertyValuesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Value'
    TokensResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        csrfToken:
          type: string
    ListGroupRecordsResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/GroupRecord'
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              enum:
                - 1000_invalid_token
            message:
              type: string
            fields:
              type: object
              additionalProperties:
                type: string
    JWTToken:
      type: object
      required: [ 'accountId', 'iss', 'exp', 'nbf', 'iat', 'jti' ]
      description: see https://datatracker.ietf.org/doc/html/rfc7519
      properties:
        accountId:
          type: integer
          format: int64
        iss:
          type: string
          enum:
            - optiprism
        exp:
          type: integer
          format: int64
        nbf:
          type: integer
          format: int64
        iat:
          type: integer
          format: int64
        jti:
          type: integer
          format: string
    FunnelResponse:
      type: object
      required: [ "groups", "steps" ]
      properties:
        groups:
          type: array
          items:
            type: string
        steps:
          type: array
          items:
            type: object
            required: [ "step","data" ]
            properties:
              step:
                type: string
              data:
                type: array
                items:
                  type: object
                  required: [ "groups","ts","total","conversionRatio","avgTimeToConvert","avgTimeToConvertFromStart","droppedOff","dropOffRatio","timeToConvert","timeToConvertFromStart" ]
                  properties:
                    groups:
                      type: array
                      items:
                        type: string
                    ts:
                      type: number
                    total:
                      type: number
                    conversionRatio:
                      type: number
                    avgTimeToConvert:
                      type: number
                    avgTimeToConvertFromStart:
                      type: number
                    droppedOff:
                      type: number
                    dropOffRatio:
                      type: number
                    timeToConvert:
                      type: number
                    timeToConvertFromStart:
                      type: number
    DataTableResponse:
      type: object
      properties:
        columns:
          type: array
          items:
            type: object
            required: [ 'type', 'dataType', 'isNullable', 'name', 'data' ]
            properties:
              propertyName:
                type: string
              propertyType:
                $ref: '#/components/schemas/PropertyType'
              type:
                type: string
                enum:
                  - dimension
                  - metric
              name:
                type: string
              isNullable:
                type: boolean
              dataType:
                $ref: '#/components/schemas/DataType'
              data:
                oneOf:
                  - type: array
                    items:
                      type: string
                  - type: array
                    items:
                      type: number
                  - type: array
                    items:
                      type: boolean
              step:
                type: number
              compareValues:
                oneOf:
                  - type: array
                    items:
                      type: string
                  - type: array
                    items:
                      type: number
                  - type: array
                    items:
                      type: boolean
    ListPropertiesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Property'
    ListCustomPropertiesResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/CustomProperty'
    ListResponseMetadata:
      description: list response metadata
      type: object
      properties:
        meta:
          type: object
          properties:
            next:
              type: string
            prev:
              type: string
            total:
              type: integer
    Account:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: integer
          format: int64
        updatedBy:
          type: integer
          format: int64
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
        teams:
          type: array
          items:
            type: integer
        projects:
          type: array
          items:
            type: object
            properties:
              projectId:
                type: integer
                format: int64
              role:
                type: string
        status:
          type: string
        timezone:
          type: string
    Project:
      type: object
      required: [ 'id', 'createdAt', 'updatedAt', 'createdBy', 'creator','updatedBy', 'name', 'sessionDurationSeconds', 'sdkToken', 'eventsCount' ]
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: integer
          format: int64
        creator:
          type: string
        updatedBy:
          type: integer
          format: int64
        name:
          type: string
        sessionDurationSeconds:
          type: integer
        sdkToken:
          type: string
        eventsCount:
          type: integer
    CreateProjectRequest:
      type: object
      required: [ 'name' ]
      properties:
        name:
          type: string
        sessionDurationSeconds:
          type: integer
    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
        sessionDurationSeconds:
          type: integer
    Organization:
      type: object
      required: [ 'id', 'name' ]
      properties:
        id:
          type: number
        name:
          type: string
    CreateOrganizationRequest:
      type: object
      required: [ 'name' ]
      properties:
        name:
          type: string
    UpdateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
    GroupRecord:
      type: object
      required: [ 'properties' ]
      properties:
        properties:
          type: array
          description: list of props with values
          items:
            $ref: '#/components/schemas/GroupPropertyAndValue'
    EventRecord:
      type: object
      properties:
        properties:
          type: array
          description: array of property name and property value pairs
          items:
            $ref: '#/components/schemas/PropertyAndValue'
    DashboardPanel:
      type: object
      required: [ 'x', 'y', 'w', 'h', 'type','reportId' ]
      properties:
        type:
          type: string
          enum: [ 'report' ]
        reportId:
          type: integer
          format: int64
        x:
          type: integer
          format: int64
          description: x
        y:
          type: integer
          format: int64
          description: y
        w:
          type: integer
          format: int64
          description: width
        h:
          type: integer
          format: int64
          description: height
    CreateDashboardRequest:
      type: object
      required: [ 'name', 'rows' ]
      properties:
        tags:
          type: array
          items:
            type: string
            description: event tags
        name:
          type: string
          description: dashboard name
        description:
          type: string
          description: description
        panels:
          type: array
          items:
            $ref: '#/components/schemas/DashboardPanel'
    UpdateDashboardRequest:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
            description: event tags
        name:
          type: string
          description: dashboard name
        description:
          type: string
          description: description
        panels:
          type: array
          items:
            $ref: '#/components/schemas/DashboardPanel'
    Dashboard:
      type: object
      required: [ 'id', 'name', 'rows' ]
      properties:
        id:
          type: integer
          format: int64
          description: dashboard unique id
        createdAt:
          type: string
          format: date-time
          description: create date
        updatedAt:
          type: string
          format: date-time
          description: update (once updated)
        createdBy:
          type: integer
          format: int64
          description: id of creator User
        updatedBy:
          type: integer
          format: int64
          description: id of updater User
        projectId:
          type: integer
          format: int64
          description: project id
        tags:
          type: array
          items:
            type: string
            description: event tags
        name:
          type: string
          description: event name. Must be unique among all project events (including custom). The name field is used while events ingesting.
        description:
          type: string
          description: description
        panels:
          type: array
          items:
            $ref: '#/components/schemas/DashboardPanel'
    Report:
      type: object
      required: [ 'id', 'name', 'type', 'query' ]
      properties:
        id:
          type: integer
          format: int64
          description: report unique id
        createdAt:
          type: string
          format: date-time
          description: create date
        updatedAt:
          type: string
          format: date-time
          description: update (once updated)
        createdBy:
          type: integer
          format: int64
          description: id of creator User
        updatedBy:
          type: integer
          format: int64
          description: id of updater User
        tags:
          type: array
          items:
            type: string
            description: event tags
        name:
          type: string
        description:
          type: string
          description: description
        type:
          $ref: '#/components/schemas/ReportType'
        query:
          oneOf:
            - $ref: '#/components/schemas/EventSegmentation'
            - $ref: '#/components/schemas/FunnelQuery'
    CreateReportRequest:
      type: object
      required: [ 'name', 'type', 'query' ]
      properties:
        tags:
          type: array
          items:
            type: string
            description: event tags
        name:
          type: string
        description:
          type: string
          description: description
        type:
          $ref: '#/components/schemas/ReportType'
        query:
          oneOf:
            - $ref: '#/components/schemas/EventSegmentation'
            - $ref: '#/components/schemas/FunnelQuery'
    UpdateReportRequest:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
            description: event tags
        name:
          type: string
        description:
          type: string
          description: description
        type:
          $ref: '#/components/schemas/ReportType'
        query:
          oneOf:
            - $ref: '#/components/schemas/EventSegmentation'
            - $ref: '#/components/schemas/FunnelQuery'
    Event:
      type: object
      description: |
        Event describes user event. User event is an action which user (client) might do on a
        product site/app. For instance, user might do a signup and it might be a "Sign up" event.
        Event Also has a properties. <br/><br/> Name must be unique among project events,
        including custom ones. E.g. you can't have multiple "Sign up" events. <br/><br/>
        Normally events are created and updated by admin in a project scope, but there
        are also system events, which can't be deleted or modified.
      required: [ 'id', 'createdAt', 'createdBy', 'projectId', 'isSystem', 'status', 'name' ]
      properties:
        id:
          type: integer
          format: int64
          description: event unique id
        createdAt:
          type: string
          format: date-time
          description: create date
        updatedAt:
          type: string
          format: date-time
          description: update (once updated)
        createdBy:
          type: integer
          format: int64
          description: id of creator User
        updatedBy:
          type: integer
          format: int64
          description: id of updater User
        projectId:
          type: integer
          format: int64
          description: project id
        isSystem:
          type: boolean
          description: the event is a system-wide, shown in any project and can't be modified by a regular user
        tags:
          type: array
          items:
            type: string
            description: event tags
        name:
          type: string
          description: event name. Must be unique among all project events (including custom). The name field is used while events ingesting.
        displayName:
          type: string
          description: event name to display. If empty then name property is used.
        description:
          type: string
          description: description
        status:
          $ref: '#/components/schemas/EventStatus'
        eventProperties:
          type: array
          items:
            type: integer
            format: i64
          description: array of id of attached to event properties
    UpdateEventRequest:
      description: Update event request
      type: object
      properties:
        displayName:
          type: string
          description: event name to display. If empty then name property is used.
        description:
          type: string
          description: description
        status:
          $ref: '#/components/schemas/EventStatus'
        tags:
          type: array
          items:
            type: string
    Group:
      type: object
      required: [ 'id', 'name' ]
      properties:
        id:
          type: integer
        name:
          type: string
    UpdateGroupRecordRequest:
      type: object
      required: [ 'properties' ]
      properties:
        properties:
          type: object
          description: map of group property name and property value pairs
          additionalProperties:
            $ref: '#/components/schemas/Value'
    CustomEvent:
      description: |
        Custom Event is an alias to an expression which is used while querying.
        You can use regular or custom events in expression. You can combine events
        in expression, you can use filter by properties.
      type: object
      required: [ 'id', 'createdAt', 'createdBy', 'projectId', 'isSystem', 'status', 'name', 'events' ]
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: integer
          format: int64
        updatedBy:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        tags:
          type: array
          items:
            type: string
        name:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/CustomEventStatus'
        isSystem:
          type: boolean
        events:
          type: array
          items:
            $ref: '#/components/schemas/CustomEventEvent'
    CreateCustomEventRequest:
      required: [ "name", "events", 'eventType' ]
      description: |
        Custom Event is an alias to an expression which is used while querying.
        You can use regular or custom events in expression. You can combine events in
        expression, you can use filter by properties.
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        events:
          type: array
          items:
            $ref: '#/components/schemas/CustomEventEvent'
    UpdateCustomEventRequest:
      required: [ "name", "events", "eventType" ]
      description: |
        Custom Event is an alias to an expression which is used while querying.
        You can use regular or custom events in expression. You can combine events
        in expression, you can use filter by properties.
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/CustomEventStatus'
        tags:
          type: array
          items:
            type: string
        events:
          type: array
          items:
            $ref: '#/components/schemas/CustomEventEvent'
    CustomEventEvent:
      type: object
      description: custom event will matches all of the provided events
      required: [ 'eventType' ]
      allOf:
        - $ref: '#/components/schemas/EventRef'
        - type: object
          properties:
            filters:
              type: array
              description: array of event filters
              items:
                $ref: '#/components/schemas/EventFilterByProperty'
    Property:
      type: object
      required: [ "id", "projectId", "type","isSystem", "name", "status", "dataType", "nullable", "isArray", "isDictionary" ]
      description: |
        Property defines event or user property. For example,
        event "Buy product" may contains next properties like "Product name" and "Price."
      properties:
        id:
          type: integer
          format: int64
          description: property unique id
        createdAt:
          type: string
          format: date-time
          description: create date
        updatedAt:
          type: string
          format: date-time
          description: update (once updated)
        createdBy:
          type: integer
          format: int64
          description: id of creator User
        updatedBy:
          type: integer
          format: int64
          description: id of updater User
        projectId:
          type: integer
          format: int64
          description: project id
        events:
          type: array
          items:
            type: integer
            format: i64
          description: list of id of events which use this property
        tags:
          type: array
          items:
            type: string
        name:
          type: string
          description: property name. Must be unique
        displayName:
          type: string
          description: property name to display. If empty then name is used.
        description:
          type: string
          description: description
        type:
          $ref: '#/components/schemas/PropertyType'
        groupId:
          type: integer
        dataType:
          $ref: '#/components/schemas/DataType'
        status:
          $ref: '#/components/schemas/PropertyStatus'
        hidden:
          type: boolean
          description: hidden property is not shown in the UI
        isSystem:
          type: boolean
          description: the property is a system-wide, shown in any project and can't be modified by a regular user
        nullable:
          type: boolean
          description: nullable property might contains null value
        isArray:
          type: boolean
          description: array property might contents multiple values
        isDictionary:
          type: boolean
          description: dictionary can efficiently packs strings provided that cardinality will be relatively log (16bits is a reasonable maximum)
        dictionaryType:
          $ref: '#/components/schemas/DictionaryDataType'
    UpdatePropertyRequest:
      type: object
      description: Propetty update
      properties:
        displayName:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/PropertyStatus'
        tags:
          type: array
          items:
            type: string
    CustomProperty:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: integer
          format: int64
        updatedBy:
          type: integer
          format: int64
        projectId:
          type: integer
          format: int64
        events:
          type: array
          items:
            type: integer
            format: i64
        isSystem:
          type: boolean
        status:
          $ref: '#/components/schemas/CustomPropertyStatus'
        name:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/DataType'
        nullable:
          type: boolean
        isArray:
          type: boolean
        tags:
          type: array
          items:
            type: string
    EventRecordsListRequest:
      type: object
      description: request event records sorted by time of creation
      required: [ "time", "group" ]
      example: |
        {
          "time": {
            "type": "between",
            "from": "2017-07-21T17:32:28Z",
            "to": "2017-08-21T17:32:28Z"
          },
          "events": [
            {
              "eventName": "Buy Product",
              "eventType": "regular",
              "filters": [
                {
                  "filterType": "property",
                  "propertyName": "Device",
                  "propertyType": "user",
                  "operation": "exists"
                },
                {
                  "filterType": "property",
                  "propertyName": "Product Name",
                  "propertyType": "event",
                  "operation": "=",
                  "value": [
                    "tv"
                  ]
                }
              ]
            }
          ],
          "filters": {
            "groupsCondition": "or",
            "groups": [
              {
                "filtersCondition": "and",
                "filters": [
                  {
                    "type": "property",
                    "propertyName": "Country",
                    "propertyType": "user",
                    "operation": "eq",
                    "value": [
                      "UK"
                    ]
                  },
                  {
                    "type": "property",
                    "propertyName": "Device",
                    "propertyType": "user",
                    "operation": "eq",
                    "value": [
                      "Iphone"
                    ]
                  }
                ]
              },
              {
                "filtersCondition": "or",
                "filters": [
                  {
                    "type": "property",
                    "propertyName": "Country",
                    "propertyType": "user",
                    "operation": "eq",
                    "value": [
                      "General"
                    ]
                  },
                  {
                    "type": "property",
                    "propertyName": "Country",
                    "propertyType": "user",
                    "operation": "eq",
                    "value": [
                      "Electronics"
                    ]
                  }
                ]
              }
            ]
          }
        }
      properties:
        time:
          type: object
          description: select time
          oneOf:
            - $ref: '#/components/schemas/TimeBetween'
            - $ref: '#/components/schemas/TimeFrom'
            - $ref: '#/components/schemas/TimeLast'
        events:
          type: array
          description: array of events to query
          items:
            title: 'EventRecordRequestEvent'
            type: object
            required: [ "eventType" ]
            allOf:
              - $ref: '#/components/schemas/EventRef'
              - type: object
                title: 'EventRecordRequestEventFilters'
                properties:
                  filters:
                    type: array
                    description: array of event filters
                    items:
                      type: object
                      oneOf:
                        - $ref: '#/components/schemas/EventFilterByProperty'
                        - $ref: '#/components/schemas/EventFilterByGroup'
        filters:
          $ref: '#/components/schemas/EventGroupedFilters'
        properties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyRef'
        sort:
          $ref: '#/components/schemas/SortablePropertyRef'
    GroupRecordsListRequest:
      type: object
      description: request group records sorted by time of creation
      required: [ "group" ]
      properties:
        time:
          type: object
          description: select time
          oneOf:
            - $ref: '#/components/schemas/TimeBetween'
            - $ref: '#/components/schemas/TimeFrom'
            - $ref: '#/components/schemas/TimeLast'
        group:
          type: integer
          description: group that is used in aggregations by group. For instance, group by user or group by organization.
          example: user
        filters:
          $ref: '#/components/schemas/EventGroupedFilters'
        properties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyRef'
        sort:
          $ref: '#/components/schemas/SortablePropertyRef'
    FunnelQuery:
      type: object
      required: [ "time", "group", "steps", "timeWindow", "chartType", "count", "stepOrder" ]
      properties:
        time:
          type: object
          description: select time
          oneOf:
            - $ref: '#/components/schemas/TimeBetween'
            - $ref: '#/components/schemas/TimeFrom'
            - $ref: '#/components/schemas/TimeLast'
        group:
          type: integer
          example: group
        steps:
          type: array
          items:
            type: object
            required: [ 'events' ]
            properties:
              events:
                type: array
                items:
                  $ref: '#/components/schemas/FunnelEvent'
              order:
                type: object
                oneOf:
                  - type: object
                    required: [ 'type' ]
                    properties:
                      type:
                        type: string
                        enum:
                          - exact
                  - type: object
                    required: [ 'type', 'from', 'to' ]
                    properties:
                      type:
                        type: string
                        enum:
                          - any
                      from:
                        type: integer
                      to:
                        type: integer
        timeWindow:
          type: object
          required: [ 'n', 'unit' ]
          properties:
            n:
              type: integer
              description: N days/weeks
            unit:
              $ref: '#/components/schemas/TimeUnitWithSession'
        chartType:
          type: object
          oneOf:
            - $ref: '#/components/schemas/FunnelStepsChartType'
            - $ref: '#/components/schemas/FunnelConversionOverTimeChartType'
        count:
          type: string
          enum:
            - unique
            - nonUnique
            - session
        filter:
          type: object
          oneOf:
            - type: object
              required: [ 'type' ]
              properties:
                type:
                  type: string
                  enum:
                    - dropOffOnAnyStep
            - type: object
              required: [ 'type','step' ]
              properties:
                type:
                  type: string
                  enum:
                    - dropOffOnStep
                step:
                  type: integer
                  description: Step number
            - type: object
              required: [ 'type','from','to' ]
              properties:
                type:
                  type: string
                  enum:
                    - timeToConvert
                from:
                  type: integer
                  description: From timestamp
                to:
                  type: integer
                  description: From timestamp
        attribution:
          type: object
          required: [ 'type' ]
          oneOf:
            - type: object
              required: [ 'type' ]
              properties:
                type:
                  type: string
                  enum:
                    - first
                    - last
            - type: object
              required: [ 'type', 'step' ]
              properties:
                type:
                  type: string
                  enum:
                    - step
                step:
                  type: integer
        holdingConstants:
          type: array
          items:
            $ref: '#/components/schemas/PropertyRef'
        exclude:
          type: array
          items:
            - $ref: '#/components/schemas/FunnelExcludeSteps'
        breakdowns:
          type: array
          description: array of breakdowns
          items:
            $ref: '#/components/schemas/BreakdownByProperty'
        segments:
          description: array of segments
          type: array
          items:
            $ref: '#/components/schemas/EventSegmentationSegment'
        filters:
          $ref: '#/components/schemas/EventGroupedFilters'
        touch:
          oneOf:
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - first
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - last
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - step
                step:
                  type: integer
    FunnelStepsChartType:
      type: object
      required: [ 'type' ]
      properties:
        type:
          type: string
          enum:
            - steps
    FunnelConversionStepsChartTypeResponse:
      type: object
      properties:
        dimensionHeaders:
          type: array
          items:
            type: string
        dimensions:
          type: array
          items:
            type: array
            items:
              type: string
        metrics:
          type: array
          items:
            type: string
            enum:
              - avgTimeToConvert
        singles:
          type: array
          items:
            type: integer
        series:
          type: array
          items:
            type: array
            items:
              type: number
    FunnelConversionOverTimeChartType:
      type: object
      required: [ 'type', 'intervalUnit' ]
      properties:
        type:
          type: string
          enum:
            - conversionOverTime
        intervalUnit:
          $ref: '#/components/schemas/TimeUnit'
    FunnelTimeToConvertChartType:
      type: object
      required: [ 'type', 'intervalUnit' ]
      properties:
        type:
          type: string
          enum:
            - timeToConvert
        intervalUnit:
          $ref: '#/components/schemas/TimeUnit'
        minInterval:
          type: integer
        maxInterval:
          type: integer
    FunnelFrequencyChartType:
      type: object
      required: [ 'type' ]
      properties:
        type:
          type: string
          enum:
            - frequency
    FunnelExcludeSteps:
      type: object
      required: [ 'steps' ]
      properties:
        steps:
          type: object
          required: [ 'type' ]
          oneOf:
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - all
            - type: object
              required: [ 'type', 'from', 'to' ]
              properties:
                type:
                  type: string
                  enum:
                    - between
                from:
                  type: integer
                to:
                  type: integer
    FunnelEvent:
      description: event object
      required: [ "eventType", "filters" ]
      allOf:
        - $ref: '#/components/schemas/EventRef'
        - type: object
          properties:
            filters:
              type: array
              description: array of event filters
              items:
                type: object
                required: [ 'type' ]
                oneOf:
                  - $ref: '#/components/schemas/EventFilterByProperty'
    AnalysisLinear:
      type: object
      required: [ 'type' ]
      properties:
        type:
          type: string
          enum:
            - linear
    AnalysisRollingAverage:
      type: object
      required: [ 'type', 'window', 'unit' ]
      properties:
        type:
          type: string
          enum:
            - rollingAverage
        window:
          type: integer
        unit:
          $ref: '#/components/schemas/TimeUnit'
    AnalysisLogarithmic:
      type: object
      required: [ 'type' ]
      properties:
        type:
          type: string
          enum:
            - logarithmic
        window:
          type: integer
    AnalysisCumulative:
      type: object
      required: [ 'type' ]
      properties:
        type:
          type: string
          enum:
            - cumulative
    EventSegmentation:
      type: object
      description: event segmentation report type main payload
      required: [ "time", "group", "intervalUnit", "chartType", "analysis", "events" ]
      properties:
        time:
          type: object
          description: select time
          oneOf:
            - $ref: '#/components/schemas/TimeBetween'
            - $ref: '#/components/schemas/TimeFrom'
            - $ref: '#/components/schemas/TimeLast'
        group:
          type: integer
          description: group that is used in aggregations by group. For instance, group by user or group by organizartion.
          example: user
        intervalUnit:
          $ref: '#/components/schemas/TimeUnit'
        chartType:
          $ref: '#/components/schemas/EventChartType'
        analysis:
          type: object
          required: [ 'type' ]
          description: analysis type
          oneOf:
            - $ref: '#/components/schemas/AnalysisLinear'
            - $ref: '#/components/schemas/AnalysisRollingAverage'
            - $ref: '#/components/schemas/AnalysisCumulative'
        compare:
          type: object
          required: [ "offset", "unit" ]
          description: optional comparison with previous period
          example: 1 day - compare with past day
          properties:
            offset:
              type: integer
              description: offset in past in timeUnit
              example: 1
            unit:
              $ref: '#/components/schemas/TimeUnit'
        events:
          type: array
          description: array of events to query
          items:
            $ref: '#/components/schemas/EventSegmentationEvent'
        filters:
          $ref: '#/components/schemas/EventGroupedFilters'
        breakdowns:
          type: array
          description: array of common breakdowns (which applies to all events)
          items:
            $ref: '#/components/schemas/BreakdownByProperty'
        segments:
          description: array of segments
          type: array
          items:
            $ref: '#/components/schemas/EventSegmentationSegment'
    EventSegmentationEvent:
      description: event object
      required: [ "queries" ]
      allOf:
        - $ref: '#/components/schemas/EventRef'
        - type: object
          properties:
            filters:
              type: array
              description: array of event filters
              items:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/EventFilterByProperty'
            breakdowns:
              type: array
              items:
                type: object
                description: array of event breakdowns
                oneOf:
                  - $ref: '#/components/schemas/BreakdownByProperty'
            queries:
              type: array
              description: array of event queries
              items:
                oneOf:
                  - $ref: '#/components/schemas/QuerySimple'
                  - $ref: '#/components/schemas/QueryCountPerGroup'
                  - $ref: '#/components/schemas/QueryAggregatePropertyPerGroup'
                  - $ref: '#/components/schemas/QueryAggregateProperty'
                  - $ref: '#/components/schemas/QueryFormula'
    EventGroupedFilters:
      type: object
      description: event filters
      required: [ "groups" ]
      properties:
        groupsCondition:
          type: string
          enum:
            - and
            - or
        groups:
          type: array
          items:
            type: object
            required: [ "filters" ]
            properties:
              filtersCondition:
                type: string
                enum:
                  - and
                  - or
              filters:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/EventFilterByCohort'
                    - $ref: '#/components/schemas/EventFilterByProperty'
                    - $ref: '#/components/schemas/EventFilterByGroup'
    EventFilterByCohort:
      type: object
      required: [ 'type', 'cohortId' ]
      properties:
        type:
          type: string
          enum:
            - cohort
        cohortId:
          type: integer
          format: int64
    EventFilterByGroup:
      type: object
      required: [ 'type', 'groupId' ]
      properties:
        type:
          type: string
          enum:
            - group
        groupId:
          type: integer
    EventFilterByProperty:
      type: object
      description: filter by property
      required: [ "type", "operation" ]
      allOf:
        - $ref: '#/components/schemas/PropertyRef'
        - type: object
          properties:
            type:
              type: string
              enum:
                - property
            operation:
              $ref: '#/components/schemas/PropertyFilterOperation'
            value:
              description: one or several property values. May be not set if operation is "empty" or "exist"
              type: array
              items:
                $ref: '#/components/schemas/Value'
    BreakdownByProperty:
      type: object
      description: breakdown by property.
      required: [ "type" ]
      allOf:
        - $ref: '#/components/schemas/PropertyRef'
        - type: object
          properties:
            type:
              type: string
              enum:
                - property
    EventSegmentationSegment:
      type: object
      description: segment
      required: [ "conditions" ]
      properties:
        name:
          type: string
          description: name of segment
          example: iphone users
        conditions:
          type: array
          description: array of conditions
          items:
            type: object
            oneOf:
              - $ref: '#/components/schemas/SegmentConditionHasPropertyValue'
              - $ref: '#/components/schemas/SegmentConditionHadPropertyValue'
              - $ref: '#/components/schemas/SegmentConditionDidEvent'
              - $ref: '#/components/schemas/SegmentConditionFunnel'
    TimeBetween:
      type: object
      description: time range between fixed values
      required: [ "type", "from", "to", "timezone" ]
      example: |
        {
          "time": {
            "type": "between",
            "from": "2017-07-21T17:32:28Z",
            "to": "2017-08-21T17:32:28Z"
          }
        }
      properties:
        type:
          type: string
          enum:
            - between
        from:
          type: string
          format: date-time
          description: start date
          example: 2017-07-21T17:32:28Z
        to:
          type: string
          format: date-time
          description: end date
          example: 2017-08-21T17:32:28Z
        timezone:
          type: string
    TimeFrom:
      type: object
      description: time range between fixed value and current time
      required: [ "type", "from", "timezone" ]
      example: |
        {
          "time": {
            "type": "from",
            "from": "2017-07-21T17:32:28Z"
          }
        }
      properties:
        type:
          type: string
          enum:
            - from
        from:
          type: string
          format: date-time
          description: start date
          example: 2017-0-21T17:32:28Z
        timezone:
          type: string
    TimeLast:
      type: object
      description: take last N days/weeks
      required: [ "type", "last", "unit", "timezone" ]
      example: |
        {
          "time": {
            "type": "last",
            "last": 10,
            "unit":"day"
          }
        }
      properties:
        type:
          type: string
          enum:
            - last
        last:
          type: integer
          description: Last days/weeks
        unit:
          $ref: '#/components/schemas/TimeUnit'
    TimeAfterFirstUse:
      type: object
      description: time spent after the first use of event. Use in segmentation
      required: [ "type", "within", "unit" ]
      example: |
        within 2 days after first use - select event which was triggered within 2 days
        of it's first use by user
        {
          "time": {
            "type": "afterFirstUse",
            "within": 10,
            "unit":"day"
          }
        }
      properties:
        type:
          type: string
          enum:
            - afterFirstUse
        within:
          type: integer
        unit:
          $ref: '#/components/schemas/TimeUnit'
    TimeWindowEach:
      type: object
      description: |
        window operation for segmentation. Tells that event should be triggered each
        timeunit (each day, for instance)
        {
          "time": {
            "type": "windowEach",
            "unit":"day"
          }
        }
      required: [ "type", "unit" ]
      properties:
        type:
          type: string
          enum:
            - windowEach
        unit:
          $ref: '#/components/schemas/TimeUnit'
    TimeUnit:
      type: string
      description: time unit
      enum:
        - "hour"
        - "day"
        - "week"
        - "month"
        - "year"
    TimeUnitWithSession:
      type: string
      description: time unit with session
      enum:
        - "hour"
        - "day"
        - "week"
        - "month"
        - "year"
        - "session"
    EventChartType:
      type: string
      description: chart type
      enum:
        - "line"
        - "bar"
        - "singleValue"
    SegmentConditionHasPropertyValue:
      type: object
      description: check whether the user currently has a property with a value
      required: [ "type", "propertyName", "operation" ]
      properties:
        type:
          type: string
          enum:
            - hasPropertyValue
        propertyName:
          type: string
        propertyType:
          $ref: '#/components/schemas/PropertyType'
        operation:
          $ref: '#/components/schemas/PropertyFilterOperation'
        value:
          type: array
          description: one or more values. Doesn't need if operation is "empty" or "exist"
          items:
            $ref: '#/components/schemas/Value'
    SegmentConditionHadPropertyValue:
      type: object
      description: check whether the user had a property with a value
      required: [ "type", "propertyName", "operation", "time" ]
      properties:
        type:
          type: string
          enum:
            - hadPropertyValue
        propertyName:
          type: string
        propertyType:
          $ref: '#/components/schemas/PropertyType'
        operation:
          $ref: '#/components/schemas/PropertyFilterOperation'
        value:
          type: array
          description: one or more values. Doesn't need if operation is "empty" or "exist"
          items:
            $ref: '#/components/schemas/Value'
        time:
          type: object
          description: time frame
          oneOf:
            - $ref: '#/components/schemas/TimeBetween'
            - $ref: '#/components/schemas/TimeLast'
            - $ref: '#/components/schemas/TimeWindowEach'
    DidEventCount:
      type: object
      description: find all users who made event X times
      example: filter who made at least 1 purchase each day
      required: [ "type", "operation", "value", "time" ]
      properties:
        type:
          type: string
          enum:
            - count
        operation:
          $ref: '#/components/schemas/PropertyFilterOperation'
        value:
          type: integer
          description: one or more values. Doesn't need if operation is "empty" or "exist"
        time:
          type: object
          description: time frame
          oneOf:
            - $ref: '#/components/schemas/TimeBetween'
            - $ref: '#/components/schemas/TimeLast'
            - $ref: '#/components/schemas/TimeAfterFirstUse'
            - $ref: '#/components/schemas/TimeWindowEach'
    DidEventRelativeCount:
      type: object
      description: find all users who made left event X time more/less than right event.
      example: find users who viewed product more than bought product in last 30 days
      required: [ "type", "operation", "rightEvent", "time" ]
      allOf:
        - $ref: '#/components/schemas/EventRef'
        - type: object
          properties:
            filters:
              type: array
              items:
                $ref: '#/components/schemas/EventFilterByProperty'
            type:
              type: string
              enum:
                - relativeCount
            operation:
              $ref: '#/components/schemas/PropertyFilterOperation'
            time:
              type: object
              oneOf:
                - $ref: '#/components/schemas/TimeBetween'
                - $ref: '#/components/schemas/TimeLast'
                - $ref: '#/components/schemas/TimeAfterFirstUse'
                - $ref: '#/components/schemas/TimeWindowEach'
    DidEventAggregateProperty:
      type: object
      description: aggregate property and compare to value
      example: find who made sum(revenue) >$1000 in last 30 days
      required: [ "type", "aggregate", "operation", "time" ]
      allOf:
        - $ref: '#/components/schemas/PropertyRef'
        - type: object
          properties:
            type:
              type: string
              enum:
                - aggregateProperty
            aggregate:
              $ref: '#/components/schemas/QueryAggregate'
            operation:
              $ref: '#/components/schemas/PropertyFilterOperation'
            value:
              $ref: '#/components/schemas/Value'
            time:
              type: object
              description: time frame
              oneOf:
                - $ref: '#/components/schemas/TimeBetween'
                - $ref: '#/components/schemas/TimeLast'
                - $ref: '#/components/schemas/TimeAfterFirstUse'
                - $ref: '#/components/schemas/TimeWindowEach'
    DidEventHistoricalCount:
      type: object
      description: find users with Nth event occurance
      example: find who made an event 3rd time in last month
      required: [ "type", "propertyType", "operation", "time" ]
      properties:
        type:
          type: string
          enum:
            - historicalCount
        operation:
          $ref: '#/components/schemas/PropertyFilterOperation'
        value:
          type: integer
        time:
          type: object
          oneOf:
            - $ref: '#/components/schemas/TimeBetween'
            - $ref: '#/components/schemas/TimeLast'
            - $ref: '#/components/schemas/TimeAfterFirstUse'
            - $ref: '#/components/schemas/TimeWindowEach'
    SegmentConditionDidEvent:
      description: did event condition
      allOf:
        - $ref: '#/components/schemas/EventRef'
        - type: object
          required: [ 'type' ]
          properties:
            type:
              type: string
              enum:
                - didEvent
        - type: object
          required: [ 'aggregate' ]
          properties:
            filters:
              type: array
              items:
                $ref: '#/components/schemas/EventFilterByProperty'
            aggregate:
              type: object
              oneOf:
                - $ref: '#/components/schemas/DidEventCount'
                - $ref: '#/components/schemas/DidEventRelativeCount'
                - $ref: '#/components/schemas/DidEventAggregateProperty'
                - $ref: '#/components/schemas/DidEventHistoricalCount'
    SegmentConditionFunnel:
      type: object
      required: [ 'type' ]
      properties:
        type:
          type: string
          enum:
            - funnel
        last:
          type: integer
        bucket:
          $ref: '#/components/schemas/TimeUnit'
    QuerySimple:
      type: object
      description: simple query without any additional arguments
      required: [ "type" ]
      properties:
        type:
          type: string
          enum:
            - countEvents
            - countUniqueGroups
            - dailyActiveGroups
            - weeklyActiveGroups
            - monthlyActiveGroups
    QueryCountPerGroup:
      type: object
      description: event count aggregate by group
      example: avegate event count per user
      required: [ "type", "aggregate" ]
      properties:
        type:
          type: string
          enum:
            - countPerGroup
        aggregate:
          $ref: '#/components/schemas/QueryAggregate'
    QueryAggregatePropertyPerGroup:
      description: aggregate of property per by group
      example: sum of revenue property per user, then calculate average
      type: object
      allOf:
        - $ref: '#/components/schemas/PropertyRef'
        - type: object
          required: [ 'type' ]
          properties:
            type:
              type: string
              enum:
                - aggregatePropertyPerGroup
        - type: object
          required: [ 'aggregate', 'aggregatePerGroup' ]
          properties:
            aggregate:
              $ref: '#/components/schemas/QueryAggregate'
            aggregatePerGroup:
              $ref: '#/components/schemas/QueryAggregatePerGroup'
    QueryAggregateProperty:
      description: aggregate of property per by group
      example: sum of revenue property per user, then calculate average
      type: object
      allOf:
        - $ref: '#/components/schemas/PropertyRef'
        - type: object
          required: [ 'type' ]
          properties:
            type:
              type: string
              enum:
                - aggregateProperty
        - type: object
          required: [ 'aggregate' ]
          properties:
            aggregate:
              $ref: '#/components/schemas/QueryAggregate'
    QueryFormula:
      description: apply formula
      type: object
      required: [ 'type', 'formula' ]
      properties:
        type:
          type: string
          enum:
            - formula
        formula:
          type: string
    QueryAggregate:
      type: string
      enum:
        - sum
        - avg
        - median
        - count
        - min
        - max
        - distinctCount
        - percentile25
        - percentile75
        - percentile90
        - percentile99
    QueryAggregatePerGroup:
      type: string
      enum:
        - sum
        - avg
        - median
        - count
        - min
        - max
        - distinctCount
        - percentile25
        - percentile75
        - percentile90
        - percentile99
    GroupPropertyAndValue:
      type: object
      description: property name and value
      properties:
        properties:
          type: object
          properties:
            propertyName:
              type: string
            value:
              $ref: '#/components/schemas/Value'
    PropertyAndValue:
      type: object
      description: property name, type and value
      allOf:
        - $ref: '#/components/schemas/PropertyRef'
        - type: object
          required: [ 'value' ]
          properties:
            value:
              $ref: '#/components/schemas/Value'
    Value:
      type: object
      description: value
      oneOf:
        - type: string
        - type: number
        - type: boolean
    PropertyFilterOperation:
      description: operation
      type: string
      enum:
        - "eq"
        - "neq"
        - "gt"
        - "gte"
        - "lt"
        - "lte"
        - "true"
        - "false"
        - "exists"
        - "empty"
        - "regex"
        - "notRegex"
        - "like"
        - "notLike"
    PropertyRef:
      type: object
      required: [ 'propertyType' ]
      description: reference to a property by id or name, depends on property type
      properties:
        propertyName:
          type: string
        propertyType:
          $ref: '#/components/schemas/PropertyType'
        group:
          type: integer
    SortablePropertyRef:
      type: object
      required: [ 'propertyType' ]
      description: reference to a property by id or name, depends on property type
      properties:
        propertyName:
          type: string
        propertyType:
          $ref: '#/components/schemas/PropertyType'
        group:
          type: integer
        direction:
          $ref: '#/components/schemas/SortDirection'
    EventRef:
      type: object
      required: [ 'eventType' ]
      description: reference to event by its name and type
      properties:
        eventName:
          type: string
        eventType:
          $ref: '#/components/schemas/EventType'
    EventType:
      type: string
      description: possible event type
      enum:
        - regular
        - custom
    EventStatus:
      type: string
      description: event status
      enum:
        - enabled
        - disabled
    CustomEventStatus:
      type: string
      description: custom event status
      enum:
        - enabled
        - disabled
    PropertyStatus:
      type: string
      description: property status
      enum:
        - enabled
        - disabled
    CustomPropertyStatus:
      type: string
      description: custom property status
      enum:
        - enabled
        - disabled
    PropertyType:
      type: string
      description: possible property type
      enum:
        - event
        - custom
        - group
    SortDirection:
      type: string
      enum:
        - asc
        - desc
    DataType:
      type: string
      description: data type
      enum:
        - string
        - number
        - boolean
        - decimal
        - timestamp
    DictionaryDataType:
      type: string
      description: dictionary data type
      enum:
        - uint8
        - uint16
        - uint32
        - uint64
    ReportType:
      type: string
      description: report type
      enum:
        - eventSegmentation
        - funnel
    Profile:
      type: object
      description: User profile
      required: [ 'id','name','email', 'timezone' ]
      properties:
        name:
          type: string
        email:
          type: string
        timezone:
          type: string
        forceUpdatePassword:
          type: boolean
        forceUpdateEmail:
          type: boolean
    UpdateProfileNameRequest:
      type: object
      required: [ 'name' ]
      properties:
        name:
          type: string
    UpdateProfileEmailRequest:
      type: object
      required: [ 'email','password' ]
      properties:
        email:
          type: string
        password:
          type: string
    UpdateProfilePasswordRequest:
      type: object
      required: [ 'password','newPassword' ]
      properties:
        password:
          type: string
        newPassword:
          type: string
    SetProfilePasswordRequest:
      type: object
      required: [ 'password' ]
      properties:
        password:
          type: string
    SetProfileEmailRequest:
      type: object
      required: [ 'email' ]
      properties:
        email:
          type: string

    CreateBookmarkRequest:
      type: object
      properties:
        query:
          oneOf:
            - $ref: '#/components/schemas/EventSegmentation'
            - $ref: '#/components/schemas/FunnelQuery'
    Bookmark:
      type: object
      required: [ 'id' ]
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: integer
          format: int64
        query:
          oneOf:
            - $ref: '#/components/schemas/EventSegmentation'
            - $ref: '#/components/schemas/FunnelQuery'


